var test = require('tape')
var commaNumber = require('../lib')

test('Formatting', function (t) {
  var testPairs = [
    // Positive numbers
    [0, '0'],
    [1, '1'],
    [12, '12'],
    [123, '123'],
    [1234, '1,234'],
    [12345, '12,345'],
    [123456, '123,456'],
    [1234567, '1,234,567'],
    [1234567890, '1,234,567,890'],
    [Infinity, 'Infinity'],

    // With decimals
    [.1, '0.1'],
    [.12, '0.12'],
    [.123, '0.123'],
    [1.2, '1.2'],
    [1.23, '1.23'],
    [1.234, '1.234'],
    [12.3, '12.3'],
    [12.34, '12.34'],
    [123.4, '123.4'],
    [123.45, '123.45'],
    [1234.5, '1,234.5'],
    [1234.56, '1,234.56'],
    [12345.6, '12,345.6'],
    [12345.67, '12,345.67'],
    [123456.7, '123,456.7'],
    [123456.78, '123,456.78'],
    [123456.789, '123,456.789'],
    [1234567.8, '1,234,567.8'],
    [1234567.89, '1,234,567.89'],
    [1234567.899, '1,234,567.899'],

    // Negative numbers
    [-1, '-1'],
    [-12, '-12'],
    [-123, '-123'],
    [-1234, '-1,234'],
    [-12345, '-12,345'],
    [-123456, '-123,456'],
    [-1234567, '-1,234,567'],
    [-1234567890, '-1,234,567,890'],
    [-Infinity, '-Infinity'],

    // With decimals
    [-.1, '-0.1'],
    [-.12, '-0.12'],
    [-.123, '-0.123'],
    [-1.2, '-1.2'],
    [-1.23, '-1.23'],
    [-1.234, '-1.234'],
    [-12.3, '-12.3'],
    [-12.34, '-12.34'],
    [-123.4, '-123.4'],
    [-123.45, '-123.45'],
    [-1234.5, '-1,234.5'],
    [-1234.56, '-1,234.56'],
    [-12345.6, '-12,345.6'],
    [-12345.67, '-12,345.67'],
    [-123456.7, '-123,456.7'],
    [-123456.78, '-123,456.78'],
    [-123456.789, '-123,456.789'],
    [-1234567.8, '-1,234,567.8'],
    [-1234567.89, '-1,234,567.89'],
    [-1234567.899, '-1,234,567.899'],

    // Strings
    ['0', '0'],
    ['1', '1'],
    ['12', '12'],
    ['123', '123'],
    ['1234', '1,234'],
    ['12345', '12,345'],
    ['123456', '123,456'],
    ['1234567', '1,234,567'],
    ['1234567890', '1,234,567,890'],

    // With decimals
    ['.1', '.1'],
    ['0.1', '0.1'],
    ['.12', '.12'],
    ['0.12', '0.12'],
    ['.123', '.123'],
    ['0.123', '0.123'],
    ['1.2', '1.2'],
    ['1.23', '1.23'],
    ['1.234', '1.234'],
    ['12.3', '12.3'],
    ['12.34', '12.34'],
    ['123.4', '123.4'],
    ['123.45', '123.45'],
    ['1234.5', '1,234.5'],
    ['1234.56', '1,234.56'],
    ['12345.6', '12,345.6'],
    ['12345.67', '12,345.67'],
    ['123456.7', '123,456.7'],
    ['123456.78', '123,456.78'],
    ['123456.789', '123,456.789'],
    ['1234567.8', '1,234,567.8'],
    ['1234567.89', '1,234,567.89'],
    ['1234567.899', '1,234,567.899'],

    // Invalid input
    [[], '0'],
    [{}, '0'],
    [NaN, '0'],
    [null, '0'],
    [undefined, '0'],
    ['abc', '0']
  ]

  t.plan(testPairs.length)
  testPairs.forEach(function (pair) {
    var input = pair[0]
      , actual = commaNumber(input)
      , expected = pair[1]
      , inputString = typeof input === 'object' ? JSON.stringify(input) :
                      typeof input === 'string' ? '\'' + input + '\''   : input
      , description = inputString + ' => ' + expected

    t.equal(actual, expected, description)
  })
})

test('Separator', function (t) {
  t.plan(3)
  t.equal(commaNumber(1000, ''), '1000', '1000 => 1000')
  t.equal(commaNumber(1000, ' '), '1 000', '1000 => 1 000')
  t.equal(commaNumber(1000, '.'), '1.000', '1000 => 1.000')
})

test('Decimal Separator', function (t) {
  t.plan(3)
  t.equal(commaNumber('1234.5', undefined, '.'), '1,234.5', '1234.5 => 1,234.5')
  t.equal(commaNumber('1234,5', '.', ','), '1.234,5', '1234,5 => 1.234,5')
  t.equal(commaNumber('1234 5', undefined, ' '), '1,234 5', '1234 5 => 1,234 5')
})
